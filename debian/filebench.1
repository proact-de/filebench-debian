.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FILEBENCH 1"
.TH FILEBENCH 1 "2012-04-28" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
filebench \- filesytem and storage benchmark
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
filebench [\-f filename] [\-h]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Filebench is a file system and storage benchmark that allows one to generate 
a large variety of workloads. Unlike typical benchmarks it is very flexible 
and allows one to minutely specify (any) applications' behaviour using extensive
Workload Model Language (\s-1WML\s0). 
Filebench uses loadable workload personalities to allow easy emulation of 
complex applications (e.g., mail, web, file, and database servers).
.PP
Filebench includes many features to facilitate file system benchmarking:
.PP
.Vb 8
\& \-Multiple workload types support via loadable personalities
\& \-Ships with more than 40 pre\-defined personalities, including the one that describe mail, web, file, and database servers behaviour
\& \-Easy to add new personalities using reach Workload Model Language (WML)
\& \-Multi\-process and multi\-thread workload support
\& \-Configurable directory hierarchies with depth, width, and file sizes set to given statistical distributions
\& \-Support of asynchronous I/O and process synchronization primitives
\& \-Integrated statistics for throughput, latency, and CPU cycle counts per system call
\& \-Tested on Linux, FreeBSD, and Solaris platforms (should work for any POSIX\-compliant Operating System)
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
[\-f <filename>] use specified file as an input instead of stdin
.PP
[\-h] Display verbose help
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Filebench generates I/O operations by executing a workload personality, 
which defines the workload to apply to the system and might provide various 
tunables to customize the workload.  
Filebench is shipped with a library of these personalities, ready to use.
.SS "Running:"
.IX Subsection "Running:"
A lot of Linux distributions enable address space randomization. 
This prevents Filebench from mapping a shared memory region to the same 
address in different processes. Disable address space randomization 
(echo 0 > /proc/sys/kernel/randomize_va_space) for stable operation of 
multi-process workloads.
.PP
Second warning informs that Filebench was not able to increase shared memory region size. You can either:
 \-Run Filebench as root
 \-Increase shared memory region size to 256MB 
(sudo echo 268435456 > /proc/sys/kernel/randomize_va_space) and ignore this warning
.SS "Running interactively:"
.IX Subsection "Running interactively:"
One can start Filebench by simply executing filebench command than load and 
run individual workload personalities with full control over their parameters.
.PP
The following example demonstrates how to run \ebfileserver workload personality:
.PP
.Vb 10
\&        root@user# filebench 
\&        Filebench Version 1.4.9
\&        12324: 0.000: Allocated 170MB of shared memory
\&        filebench> load fileserver
\&        12462: 2.869: FileServer Version 2.2 personality successfully loaded
\&        12462: 2.869: Usage: set $dir=<dir>
\&        12462: 2.869:        set $meanfilesize=<size>     defaults to 131072
\&        12462: 2.869:        set $nfiles=<value>      defaults to 10000
\&        12462: 2.869:        set $nthreads=<value>    defaults to 50
\&        12462: 2.869:        set $meanappendsize=<value>  defaults to 16384
\&        12462: 2.869:        set $iosize=<size>  defaults to 1048576
\&        12462: 2.869:        set $meandirwidth=<size> defaults to 20
\&        12462: 2.869: (sets mean dir width and dir depth is calculated as log (width, nfiles)
\&        12462: 2.869:        run runtime (e.g. run 60)
\&        filebench> set $dir=/mnt
\&        filebench> run 60
\&        12462: 4.909: Creating/pre\-allocating files and filesets
\&        12462: 4.918: Fileset bigfileset: 10000 files, avg dir width = 20, avg dir depth = 3.1, 1240.757MB
\&        12462: 5.280: Removed any existing fileset bigfileset in 1 seconds
\&        12462: 5.280: making tree for filset /tmp/bigfileset
\&        12462: 5.290: Creating fileset bigfileset...
\&        12462: 6.080: Preallocated 7979 of 10000 of fileset bigfileset in 1 seconds
\&        12462: 6.080: waiting for fileset pre\-allocation to finish
\&        12466: 6.080: Starting 1 filereader instances
\&        12467: 6.081: Starting 50 filereaderthread threads
\&        12462: 7.137: Running...
\&        12462: 67.142: Run took 60 seconds...
\&        12462: 67.145: Per\-Operation Breakdown
\&        statfile1            128311ops     2138ops/s   0.0mb/s      0.0ms/op     2320us/op\-cpu [0ms \- 0ms]
\&        deletefile1          128316ops     2138ops/s   0.0mb/s      0.2ms/op     2535us/op\-cpu [0ms \- 458ms]
\&        closefile3           128323ops     2139ops/s   0.0mb/s      0.0ms/op     2328us/op\-cpu [0ms \- 0ms]
\&        readfile1            128327ops     2139ops/s 283.8mb/s      0.1ms/op     2460us/op\-cpu [0ms \- 267ms]
\&        openfile2            128329ops     2139ops/s   0.0mb/s      0.0ms/op     2332us/op\-cpu [0ms \- 2ms]
\&        closefile2           128332ops     2139ops/s   0.0mb/s      0.0ms/op     2332us/op\-cpu [0ms \- 0ms]
\&        appendfilerand1      128337ops     2139ops/s  16.6mb/s      0.1ms/op     2377us/op\-cpu [0ms \- 559ms]
\&        openfile1            128343ops     2139ops/s   0.0mb/s      0.0ms/op     2353us/op\-cpu [0ms \- 2ms]
\&        closefile1           128349ops     2139ops/s   0.0mb/s      0.0ms/op     2317us/op\-cpu [0ms \- 1ms]
\&        wrtfile1             128352ops     2139ops/s 265.2mb/s      0.1ms/op     2601us/op\-cpu [0ms \- 268ms]
\&        createfile1          128358ops     2139ops/s   0.0mb/s      0.1ms/op     2396us/op\-cpu [0ms \- 267ms]
\&        12462: 67.145: IO Summary: 1411677 ops, 23526 ops/s, (2139/4278 r/w), 565mb/s, 393us cpu/op, 0.2ms latency
\&        12462: 67.145: Shutting down processes
\&        root@user#
.Ve
.SS "Non-interactively"
.IX Subsection "Non-interactively"
.Vb 3
\&        root@host# cp /usr/share/filebench/workloads/fileserver.f /tmp/fileserver\-noninteractive.f
\&        root@host# vim /tmp/fileserver\-noninteractive.f (add \*(Aqrun 60\*(Aq to the end of this file)
\&        root@host# filebench \-f /tmp/fileserver\-noninteractive.f
.Ve
.SH "Personalities"
.IX Header "Personalities"
Some predefined personalities (workloads) are located in /usr/share/filebench/workloads .
.SH "AUTHORS"
.IX Header "AUTHORS"
This manual page was writted using perl's pod2man by Alex Mestiashvili <mailatgoogl@gmail.com> 
using documentation from wiki page of filebench.
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Report bugs using \s-1BTS:\s0 http://sourceforge.net/tracker/?group_id=133644&atid=727883
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For further documentation see \s-1README\s0.
.PP
For \s-1WML\s0 desription see Writing Worlkoad Models: http://sourceforge.net/apps/mediawiki/filebench/index.php?title=Writing_Workload_Models
